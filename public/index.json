[{"content":"University Website ðŸ”— Maharishi International University â€¢ USA Key Courses: Below list of main courses I have studied on campus at MIU:\nFundamental Programming Practices Modern Programming Practices Server-Side Programming Algorithms Database Management Systems Modern Web Applications ","permalink":"https://arkalim.org/education/miu-university/","summary":"University Website ðŸ”— Maharishi International University â€¢ USA Key Courses: Below list of main courses I have studied on campus at MIU:\nFundamental Programming Practices Modern Programming Practices Server-Side Programming Algorithms Database Management Systems Modern Web Applications ","title":"Maharishi International University"},{"content":"University Website ðŸ”— Nouakchott University Key Courses: Below is a list of the main courses I studied on campus during my Master degree at Nouakchott University:\nAdvanced Java Programming Frameworks based on Java Frameworks based on JavaScript Frameworks based on Python Service-oriented Architecture Cloud Computing Information Systems Security Database Optimization Distributed Systems Design Patterns in Java Software Development Life Cycle Fundamentals of Computer Networking Semantic Web and Ontologies ","permalink":"https://arkalim.org/education/una-university-master/","summary":"University Website ðŸ”— Nouakchott University Key Courses: Below is a list of the main courses I studied on campus during my Master degree at Nouakchott University:\nAdvanced Java Programming Frameworks based on Java Frameworks based on JavaScript Frameworks based on Python Service-oriented Architecture Cloud Computing Information Systems Security Database Optimization Distributed Systems Design Patterns in Java Software Development Life Cycle Fundamentals of Computer Networking Semantic Web and Ontologies ","title":"Nouakchott University"},{"content":"University Website ðŸ”— Nouakchott University Key Courses: Below is a list of the main courses I studied on campus during my bachelor degree at Nouakchott University:\nBasic of Computer and Programming Algorithm and programation Algorithm and Complexity Algorithm and Functional approach General Algebra Sequences and series Material Mechanical point Lineair Algebra I Lineair Algebra II Functions of One Variable Theoretical Computing Geometrical Optics Scientific Computation Probability and Statistics Relational Database Numerical Analysis Measure and Integral ","permalink":"https://arkalim.org/education/una-university-bachelor/","summary":"University Website ðŸ”— Nouakchott University Key Courses: Below is a list of the main courses I studied on campus during my bachelor degree at Nouakchott University:\nBasic of Computer and Programming Algorithm and programation Algorithm and Complexity Algorithm and Functional approach General Algebra Sequences and series Material Mechanical point Lineair Algebra I Lineair Algebra II Functions of One Variable Theoretical Computing Geometrical Optics Scientific Computation Probability and Statistics Relational Database Numerical Analysis Measure and Integral ","title":"Nouakchott University"},{"content":"Description The [Language Learning Platform] is a full-stack web-based application developed as part of my PHP project for the MWA course. The platform was developed using the MEAN Stack technologies, and it aims to provide a comprehensive resource for individuals interested in learning new languages. It offers a curated collection of books for each language, along with ratings and feedback from users.\nKey Features: Language Documentation: The platform includes a document that lists various languages and their associated countries. Users can explore different languages and gain insights into their cultural and geographical contexts.\nBook Recommendations:* For each language, the platform offers a collection of books specifically chosen to aid language learning. Users can browse through the recommended books, which include titles, authors, and prices, helping them make informed decisions.\nUser Ratings and Feedback:* The platform allows users to rate and provide feedback on the books they have used for language learning. This feature enables learners to benefit from the experiences and recommendations of others within the community.\nExpandable Database: Initially, the project focuses on two or three languages with a selection of two or three books each. However, as the project progresses, the database can be expanded to include more languages and a wider range of resources.\nTechnologies Used: Angular: Front-end framework for building the user interface. Node.js: For server-side application development and handling HTTP requests. Express.Js: A Node.js framework for building robust APIs. MongoDB: As the NoSQL database for storing and managing housing-related data. JWT: For authentication and authorization of API endpoints. Docker: For containerizing and managing the MongoDB Server. REST API: For defining the API endpoints and interactions. Postman: For manual and automated API testing and validation. GitHub Repository: The source code and documentation for this project can be found in the following GitHub repository: ðŸ”— Language Learning Platform\nConclusion: The Language Learning Platform aims to create an interactive and supportive community for language enthusiasts, facilitating effective language learning through recommended books and shared experiences. It provides an opportunity for users to explore new languages, connect with others, and make informed choices in their language learning journey.\n","permalink":"https://arkalim.org/projects/mean-stack-app/","summary":"Description The [Language Learning Platform] is a full-stack web-based application developed as part of my PHP project for the MWA course. The platform was developed using the MEAN Stack technologies, and it aims to provide a comprehensive resource for individuals interested in learning new languages. It offers a curated collection of books for each language, along with ratings and feedback from users.\nKey Features: Language Documentation: The platform includes a document that lists various languages and their associated countries.","title":"MEAN-Stack application - Language Learning Platform"},{"content":"Intro The [Housing System Management project] is a robust and efficient application developed to manage housing-related data through a RESTful API. Leveraging Node.js and MongoDB, this project provides a seamless and secure way to interact with housing-related information while following the MVC (Model-View-Controller) architectural pattern. To ensure proper authentication and authorization, JSON Web Tokens (JWT) have been implemented. Additionally, Docker has been utilized to simplify the deployment and management of the MongoDB Server.\nKey Features: RESTful API: The project is built around a RESTful API design, enabling clients to perform CRUD (Create, Read, Update, Delete) operations on housing-related data. The API adheres to best practices for a consistent and user-friendly experience. Node.js: Node.js, known for its high-performance and event-driven architecture, forms the foundation of this project. It allows for efficient handling of incoming requests and responses, making the application scalable and responsive. MongoDB: MongoDB, a popular NoSQL database, has been chosen as the backend data store. Its flexible schema design accommodates housing-related information, making it well-suited for this project. JWT Authorization: To ensure secure access to the API\u0026rsquo;s endpoints, JSON Web Tokens (JWT) have been implemented. This provides authentication and authorization capabilities, allowing users to access appropriate resources based on their roles. MVC Model: Following the Model-View-Controller (MVC) architectural pattern, the codebase has been organized into distinct modules for better separation of concerns. This promotes code reusability, maintainability, and scalability. Dockerized MongoDB Server: Docker has been utilized to containerize the MongoDB Server, simplifying the setup and deployment process. It ensures that the application and database environment remain consistent across different development and production environments. Thorough Testing: The API has undergone comprehensive testing using both REST API testing frameworks and Postman. This testing approach ensures that the API functions correctly, delivering a reliable and stable user experience. Technologies Used: Node.js: For server-side application development and handling HTTP requests. Express.Js: A Node.js framework for building robust APIs. MongoDB: As the NoSQL database for storing and managing housing-related data. JWT: For authentication and authorization of API endpoints. Docker: For containerizing and managing the MongoDB Server. REST API: For defining the API endpoints and interactions. Postman: For manual and automated API testing and validation. GitHub Repository: The source code and documentation for this project can be found in the following GitHub repository: ðŸ”— Housing-Management API Repository.\nConclusion: The Housing System Management API built using Node.js, Express.Js, MongoDB, and JWT is a feature-rich and reliable application for managing housing-related data. With its RESTful architecture, Dockerized database, and thorough testing, the project ensures seamless functionality, security, and efficiency in handling housing information. This application could be readily integrated into real-world housing systems or serve as a solid foundation for further enhancements and customizations. Feel free to explore the GitHub repository to dive deeper into the code and contribute to the project\u0026rsquo;s development.\n","permalink":"https://arkalim.org/projects/housing-management-api/","summary":"Intro The [Housing System Management project] is a robust and efficient application developed to manage housing-related data through a RESTful API. Leveraging Node.js and MongoDB, this project provides a seamless and secure way to interact with housing-related information while following the MVC (Model-View-Controller) architectural pattern. To ensure proper authentication and authorization, JSON Web Tokens (JWT) have been implemented. Additionally, Docker has been utilized to simplify the deployment and management of the MongoDB Server.","title":"Housing Management System"},{"content":"Description The [Library Management System] is a Java-based application that provides librarians and administrators with tools to efficiently manage book collections, library members, and checkout records. The system offers secure login authentication and role-based authorization, allowing users to perform specific tasks based on their roles (Librarian, Administrator, or Both).\nKey Features Secure login with role-based authorization. Add new library members to the system. Checkout books for library members (if available). Add copies of existing books to the library collection. View checkout records of library members. Identify overdue copies of publications and the library member who has them. Add new books to the library collection. Print checkout records of library members. Determine overdue copies and their possession status. Technologies Used Java Swing (for user interface) Object serialization (for data storage) GitHub Repository The source code and documentation for this project can be found in the following GitHub repository: ðŸ”— Library Management System.\nConclusion The Library Management System provides a user-friendly interface for librarians and administrators to efficiently manage the library\u0026rsquo;s resources and maintain records of members and checkout activities. With its secure login and role-based authorization system, users can perform their tasks with ease and ensure smooth library operations. The project demonstrates the use of Java, Swing for the user interface, and object serialization for data storage, making it a comprehensive solution for library management needs. Feel free to explore the repository, try out the system, and contribute to its further development.\n","permalink":"https://arkalim.org/projects/java-swing-project/","summary":"Description The [Library Management System] is a Java-based application that provides librarians and administrators with tools to efficiently manage book collections, library members, and checkout records. The system offers secure login authentication and role-based authorization, allowing users to perform specific tasks based on their roles (Librarian, Administrator, or Both).\nKey Features Secure login with role-based authorization. Add new library members to the system. Checkout books for library members (if available). Add copies of existing books to the library collection.","title":"Library Management System"},{"content":"Main Tasks Integrated NBMâ€™s digital payment platform with third-party systems. Utilized JavaScript, Nodejs, RESTful API, and Webhooks to build the integration service. Developed cron jobs, reusable modules, and configuration files for the admin dashboard. Used Java, Spring boot, REST API, MySQL, and Angular to develop a Web tool to simulate financial transactions. Helped in ensuring the safety and accuracy of the accounting operations. Designed application architectures and workflows, and documented functionality requirements. ðŸ”— NATIONAL BANQUE OF MAURITANIA ðŸ”— Mobile Payment Platform ","permalink":"https://arkalim.org/experience/bnm/","summary":"Main Tasks Integrated NBMâ€™s digital payment platform with third-party systems. Utilized JavaScript, Nodejs, RESTful API, and Webhooks to build the integration service. Developed cron jobs, reusable modules, and configuration files for the admin dashboard. Used Java, Spring boot, REST API, MySQL, and Angular to develop a Web tool to simulate financial transactions. Helped in ensuring the safety and accuracy of the accounting operations. Designed application architectures and workflows, and documented functionality requirements.","title":"National Bank of Mauritania"},{"content":"Main Tasks Built a robust logging management and backup automation system. Improved data accessibility and integrity. Used Java, and Spring boot to develop RESTful APIs and Microservices for the backend process. Developed a real time hybrid application (web and mobile) for the system monitoring dashboard. Used Ionic, Cordova, Android SDK, Angular for the UI development. Used JavaScript, Nodejs, JWT, Firebase (cloud-functions, fire-store, and authentication) for the backend process. Integrated the bank\u0026rsquo;s SMS API for risk alerting, ensuring timely notifications to administrators for critical issues. ðŸ”— PEOPLEâ€™S BANK OF MAURITANIA ","permalink":"https://arkalim.org/experience/bpm/","summary":"Main Tasks Built a robust logging management and backup automation system. Improved data accessibility and integrity. Used Java, and Spring boot to develop RESTful APIs and Microservices for the backend process. Developed a real time hybrid application (web and mobile) for the system monitoring dashboard. Used Ionic, Cordova, Android SDK, Angular for the UI development. Used JavaScript, Nodejs, JWT, Firebase (cloud-functions, fire-store, and authentication) for the backend process. Integrated the bank\u0026rsquo;s SMS API for risk alerting, ensuring timely notifications to administrators for critical issues.","title":"PEOPLEâ€™S BANK OF MAURITANIA"},{"content":"Description Collaborated with a team of developers to design and implement a responsive web application. Implemented front-end functionalities using HTML, CSS, and JavaScript, ensuring a seamless user experience. Participated in code maintainability, debugging, and bug fixing to improve application stability. Documented technical specifications and created user manuals for internal use. Utilized Git, Bitbucket and Trello. Resulted in a more efficient and streamlined workflow. ðŸ”— MAURIBAC ","permalink":"https://arkalim.org/experience/mauribit/","summary":"Description Collaborated with a team of developers to design and implement a responsive web application. Implemented front-end functionalities using HTML, CSS, and JavaScript, ensuring a seamless user experience. Participated in code maintainability, debugging, and bug fixing to improve application stability. Documented technical specifications and created user manuals for internal use. Utilized Git, Bitbucket and Trello. Resulted in a more efficient and streamlined workflow. ðŸ”— MAURIBAC ","title":"MAURIBIT"},{"content":"Send Email\n","permalink":"https://arkalim.org/contact/","summary":"contact","title":"Contact"}]