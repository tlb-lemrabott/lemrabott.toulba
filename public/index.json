[{"content":"University Website üîó Maharishi International University ‚Ä¢ USA Key Courses: Below list of main courses I have studied on campus at MIU:\nFundamental Programming Practices Modern Programming Practices Server-Side Programming Algorithms Database Management Systems Modern Web Applications ","permalink":"https://www.lemrabotttoulba.com/education/miu-university/","summary":"University Website üîó Maharishi International University ‚Ä¢ USA Key Courses: Below list of main courses I have studied on campus at MIU:\nFundamental Programming Practices Modern Programming Practices Server-Side Programming Algorithms Database Management Systems Modern Web Applications ","title":"Maharishi International University"},{"content":"University Website üîó Nouakchott Modern University Key Courses: Below is a list of the main courses I studied on campus during my Master degree at Nouakchott University:\nAdvanced Java Programming Frameworks based on Java Frameworks based on JavaScript Frameworks based on Python Service-oriented Architecture Cloud Computing Information Systems Security Database Optimization Distributed Systems Design Patterns in Java Software Development Life Cycle Fundamentals of Computer Networking Semantic Web and Ontologies ","permalink":"https://www.lemrabotttoulba.com/education/una-university-master/","summary":"University Website üîó Nouakchott Modern University Key Courses: Below is a list of the main courses I studied on campus during my Master degree at Nouakchott University:\nAdvanced Java Programming Frameworks based on Java Frameworks based on JavaScript Frameworks based on Python Service-oriented Architecture Cloud Computing Information Systems Security Database Optimization Distributed Systems Design Patterns in Java Software Development Life Cycle Fundamentals of Computer Networking Semantic Web and Ontologies ","title":"Nouakchott Modern University"},{"content":"University Website üîó Nouakchott Modern University Key Courses: Below is a list of the main courses I studied on campus during my bachelor degree at Nouakchott University:\nBasic of Computer and Programming Algorithm and programation Algorithm and Complexity Algorithm and Functional approach General Algebra Sequences and series Material Mechanical point Lineair Algebra I Lineair Algebra II Functions of One Variable Theoretical Computing Geometrical Optics Scientific Computation Probability and Statistics Relational Database Numerical Analysis Measure and Integral ","permalink":"https://www.lemrabotttoulba.com/education/una-university-bachelor/","summary":"University Website üîó Nouakchott Modern University Key Courses: Below is a list of the main courses I studied on campus during my bachelor degree at Nouakchott University:\nBasic of Computer and Programming Algorithm and programation Algorithm and Complexity Algorithm and Functional approach General Algebra Sequences and series Material Mechanical point Lineair Algebra I Lineair Algebra II Functions of One Variable Theoretical Computing Geometrical Optics Scientific Computation Probability and Statistics Relational Database Numerical Analysis Measure and Integral ","title":"Nouakchott Modern University"},{"content":"Description This project demonstrates a complete user authentication workflow using Amazon Cognito, providing a user-friendly interface for login, error handling, password change enforcement, and home page access post-login.\nüõ°Ô∏è Authentication Approach Used: This implementation follows the Backend-Managed Authentication model. The front-end sends login requests to a backend server, which securely communicates with AWS Cognito to handle authentication, token management, and session control.\nüß© Key Features: Login Interface: Users are prompted to enter their username and password to log in. The login form is designed for simplicity and clarity.\nError Handling: \u0026ldquo;User Not Found\u0026rdquo;, If a user enters a username that is not registered in the Cognito User Pool, an appropriate error message is shown.\nError Handling: \u0026ldquo;Incorrect Password\u0026rdquo;, When an incorrect password is entered for a valid username, the interface displays an error message informing the user.\nForce Password Change: If Cognito requires the user to change their password (e.g., after an admin reset or first login), the user is redirected to a password change form after entering valid credentials.\nSuccessful Login \u0026amp; Home Page Access: Upon successful login (and password change, if required), the user is redirected to the home page, where authenticated content is accessible.\nSecure Backend Integration: The front-end sends login requests to the backend, which interacts securely with AWS Cognito for token handling, session management, and authentication validation.\n‚öôÔ∏è Technologies Used: ReactJS: For hadling routing to Cognito interface and Home page. AWS Cognito: Handles user authentication, password policies, and token generation. Spring Boot: Backend server for secure communication with Cognito (Backend-Managed Authentication model). OAuth2 and JWT: For session control and secure access to protected routes. Responsive UI/UX: Ensures optimal usability with clear feedback and guidance during login. üé≤ GitHub Repository: The demo, source code and documentation for this project can be found in the following GitHub repository:\nüîó Secure User Authentication with Backend-Managed Cognito\nüìñ Further Reading: Explore the article that compares multiple AWS Cognito authentication strategies and when to use each:\nüîó Three Approaches to Integrate AWS Cognito Authentication in Your Application\nThis blog post covers:\nDirect UI Integration with AWS Cognito API using front-end SDKs like AWS Amplify. Backend-Managed Authentication, where your backend handles user verification and token management. Cognito Hosted UI a quick, fully managed solution using AWS‚Äôs built-in login interface. Each method is explained with its pros, cons, and best use cases, helping you choose the right fit for your app‚Äôs architecture and security needs.\nConclusion: This project delivers a real-world example of secure login flow integration with AWS services. Through clean UI, robust error handling, and backend integration, it demonstrates best practices in backend-managed based authentication ensuring a smooth, informative, and secure user experience across all login scenarios.\n","permalink":"https://www.lemrabotttoulba.com/projects/cognito-auth/","summary":"Description This project demonstrates a complete user authentication workflow using Amazon Cognito, providing a user-friendly interface for login, error handling, password change enforcement, and home page access post-login.\nüõ°Ô∏è Authentication Approach Used: This implementation follows the Backend-Managed Authentication model. The front-end sends login requests to a backend server, which securely communicates with AWS Cognito to handle authentication, token management, and session control.\nüß© Key Features: Login Interface: Users are prompted to enter their username and password to log in.","title":"Secure User Authentication with Backend-Managed Cognito"},{"content":"Description The [Language Learning Platform] is a full-stack web-based application developed as part of my PHP project for the MWA course. The platform was developed using the MEAN Stack technologies, and it aims to provide a comprehensive resource for individuals interested in learning new languages. It offers a curated collection of books for each language, along with ratings and feedback from users.\nKey Features: Language Documentation: The platform includes a document that lists various languages and their associated countries. Users can explore different languages and gain insights into their cultural and geographical contexts.\nBook Recommendations:* For each language, the platform offers a collection of books specifically chosen to aid language learning. Users can browse through the recommended books, which include titles, authors, and prices, helping them make informed decisions.\nUser Ratings and Feedback:* The platform allows users to rate and provide feedback on the books they have used for language learning. This feature enables learners to benefit from the experiences and recommendations of others within the community.\nExpandable Database: Initially, the project focuses on two or three languages with a selection of two or three books each. However, as the project progresses, the database can be expanded to include more languages and a wider range of resources.\nTechnologies Used: Angular: Front-end framework for building the user interface. Node.js: For server-side application development and handling HTTP requests. Express.Js: A Node.js framework for building robust APIs. MongoDB: As the NoSQL database for storing and managing housing-related data. JWT: For authentication and authorization of API endpoints. Docker: For containerizing and managing the MongoDB Server. REST API: For defining the API endpoints and interactions. Postman: For manual and automated API testing and validation. GitHub Repository: The source code and documentation for this project can be found in the following GitHub repository: üîó Language Learning Platform\nConclusion: The Language Learning Platform aims to create an interactive and supportive community for language enthusiasts, facilitating effective language learning through recommended books and shared experiences. It provides an opportunity for users to explore new languages, connect with others, and make informed choices in their language learning journey.\n","permalink":"https://www.lemrabotttoulba.com/projects/mean-stack-app/","summary":"Description The [Language Learning Platform] is a full-stack web-based application developed as part of my PHP project for the MWA course. The platform was developed using the MEAN Stack technologies, and it aims to provide a comprehensive resource for individuals interested in learning new languages. It offers a curated collection of books for each language, along with ratings and feedback from users.\nKey Features: Language Documentation: The platform includes a document that lists various languages and their associated countries.","title":"MEAN-Stack application - Language Learning Platform"},{"content":"Introduction AWS Cognito is a powerful authentication and user management service that provides secure sign-up, sign-in, and access control capabilities. It supports features like multi-factor authentication (MFA), social login, and federated identities.\nDepending on your application\u0026rsquo;s architecture and security needs, you can integrate Cognito in three primary ways. This article outlines each approach, explaining how it works, its pros and cons, and when to use it.\nPrerequisites An AWS account with permissions to create Cognito User Pools. Basic knowledge of web authentication concepts (JWT, OAuth2). Familiarity with your tech stack (e.g., JavaScript/React, Java/Spring Boot, etc.). Approaches 1. Direct UI Integration with AWS Cognito API This method involves directly integrating AWS Cognito‚Äôs User Pool APIs into your front-end application using SDKs like AWS Amplify or the AWS SDK for your language or framework.\nüîß How It Works: The front-end communicates directly with Cognito\u0026rsquo;s authentication endpoints. Users input credentials (username/password), which are securely sent to Cognito. On successful authentication, Cognito returns ID, Access, and Refresh tokens. The front-end includes these tokens in API requests to access protected resources. ‚úÖ Pros: Quick and simple to set up, especially for front-end-centric or serverless apps. Reduces backend complexity by offloading authentication to Cognito. AWS Amplify offers extensive tooling and built-in support. ‚ùå Cons: Tokens must be securely stored and managed in the frontend. Less control over the authentication flow. Complex workflows like multi-step login or custom validation are harder to implement. üéØ Best Use Cases: SPAs (Single Page Applications) and mobile apps. Serverless applications or MVPs needing rapid authentication setup. 2. Backend-Managed Cognito Authentication In this approach, the backend acts as an intermediary between the frontend and AWS Cognito, managing authentication securely on the server side.\nüîß How It Works: The front-end sends authentication requests (credentials) to your backend. The backend handles interaction with AWS Cognito APIs. Upon successful login, the backend may issue its own session tokens or forward Cognito tokens to the frontend. ‚úÖ Pros: Improves security by avoiding direct token handling in the frontend. Offers more flexibility to implement custom authentication logic (e.g., account status checks). Easier to integrate with microservices and legacy systems. ‚ùå Cons: Requires more backend development and maintenance. Slightly higher latency due to intermediary processing. üéØ Best Use Cases: Applications requiring centralized or custom authentication logic. Microservices-based systems needing authentication orchestration. 3. Using AWS Cognito Hosted UI This is the fastest and simplest integration method. AWS Cognito provides a pre-built Hosted UI that supports sign-in, sign-up, and federated login.\nüîß Implementation Steps: Enable Hosted UI in the Cognito User Pool settings. Configure allowed callback URLs for redirection after login. Users are redirected to Cognito‚Äôs hosted login page. After login, users are redirected back with tokens via OAuth 2.0/OpenID Connect. ‚úÖ Pros: Fully managed UI with support for MFA, social logins (Google, Facebook, etc.), and SAML. Reduces development time drastically. AWS handles security, compliance, and patching. ‚ùå Cons: Limited customization of the UI and UX. Redirection-based flow may not suit all application types (e.g., embedded devices). üéØ Best Use Cases: Applications needing rapid authentication setup. Projects prioritizing compliance, minimal development, and standard login flows. Conclusion Each AWS Cognito integration method serves different use cases:\nDirect UI Integration is great for lightweight and serverless applications needing rapid setup. Backend-Managed Authentication offers more security and flexibility for complex systems. Hosted UI is ideal when you want the fastest route to secure, standards-compliant authentication. Choose the integration style that aligns best with your project\u0026rsquo;s security posture, scalability needs, and developer experience.\nCongratulations üéâü•≥ You\u0026rsquo;re now equipped with the knowledge to securely integrate AWS Cognito authentication using one of three effective methods. Whether you want maximum control, simplicity, or security, Cognito has you covered.\nSource üîóAWS Cognito Documentation - Official developer guide for Cognito User Pools. üîóAWS Amplify Auth - Guide to using Amplify to integrate Cognito into web and mobile apps. üîóOAuth2 and OpenID Connect - Understanding the standards behind AWS Cognito authentication. ","permalink":"https://www.lemrabotttoulba.com/blogs/cognito-auth/","summary":"Introduction AWS Cognito is a powerful authentication and user management service that provides secure sign-up, sign-in, and access control capabilities. It supports features like multi-factor authentication (MFA), social login, and federated identities.\nDepending on your application\u0026rsquo;s architecture and security needs, you can integrate Cognito in three primary ways. This article outlines each approach, explaining how it works, its pros and cons, and when to use it.\nPrerequisites An AWS account with permissions to create Cognito User Pools.","title":"Three Approaches to Integrate AWS Cognito Authentication in Your Application"},{"content":"Introduction Deploying a static website can often seem daunting, especially when aiming for automation and continuous integration/continuous deployment (CI/CD). Hugo, a popular static site generator, simplifies the creation process. Coupled with Amazon S3 for hosting and GitHub Actions for automation, you can set up a robust CI/CD pipeline to deploy your Hugo site seamlessly. This guide will walk you through the steps to deploy a Hugo site to Amazon S3 using GitHub Actions in 2024.\nPrerequisites Before we dive into the setup, ensure you have the following:\nA Hugo site ready for deployment. An AWS account with S3 permissions. A GitHub account. Basic knowledge of YAML syntax and Git. Setting Up Your Hugo Site First, if you haven\u0026rsquo;t already, set up your Hugo site: # Install Hugo brew install hugo # Create a new Hugo site hugo new site my-hugo-site # Navigate to the site directory cd my-hugo-site # Add a theme (optional | e.g., Ananke) git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml # Create some content hugo new posts/my-first-post.md You can also add your theme manually: Choose your prefered theme by visiting: üîóComplete List | Hugo Themes Clone it into your project, using git clone your-choosen-theme-repository-url Configuring Amazon S3 Next, configure your S3 bucket to host the static site:\nCreate an S3 Bucket: Go to the S3 console and create a new bucket. Name the bucket (e.g., my-hugo-site). Set Bucket Permissions: Enable static website hosting in the bucket properties. Set the index document to index.html. Set the error document to 404.html. Bucket Policy Add a bucket policy to make the content publicly accessible. Replace your-bucket-name with your actual bucket name: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::your-bucket-name/*\u0026#34; } ] } Create an IAM User Create a new IAM user with programmatic access. Attach a policy to grant the user permission to upload to S3: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::your-bucket-name/*\u0026#34; } ] } - Note down the Access Key ID and Secret Access Key\rSetting Up GitHub Repository Initialize a Git repository and push your Hugo site to GitHub:\n# Initialize Git git init git remote add origin https://github.com/yourusername/my-hugo-site.git # Commit and push your site git add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin master Creating GitHub Actions Workflow Create a GitHub Actions workflow to automate the deployment process:\nCreate Workflow File Create a workflow file under .github/workflows in your project Make sure the file configuration is in YAML format Configure Workflow Bellow is an exemple of a workflow file configuration name: Deploy Hugo Site to S3 on: push: branches: - master jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Install dependencies run: | npm install - name: Build site run: | hugo - name: Deploy to S3 uses: jakejarvis/s3-sync-action@v0.5.0 with: args: --acl public-read --follow-symlinks --delete env: AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }} AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} SOURCE_DIR: \u0026#39;public\u0026#39; - Push your local code to your GitHub repository.\rAdd Secrets In your GitHub repository, go to Settings \u0026gt; Secrets and add the following secrets: AWS_S3_BUCKET: Your S3 bucket name. AWS_ACCESS_KEY_ID: Your IAM user\u0026rsquo;s access key ID. AWS_SECRET_ACCESS_KEY: Your IAM user\u0026rsquo;s secret access key. Testing the CI/CD Pipeline Push a commit to the main branch to trigger the workflow:\ngit add . git commit -m \u0026#34;Trigger deployment\u0026#34; git push origin master Monitor the Actions tab in your GitHub repository to ensure the workflow runs successfully. Once completed, your Hugo site should be deployed to your S3 bucket.\nCongratulations üéâü•≥ You have successfully set up a CI/CD pipeline to deploy your Hugo site to Amazon S3 using GitHub Actions.\nThis automated process ensures that your site is always up-to-date with the latest changes, making your workflow more efficient and reliable.\nSource üîóHugo Documentation - Comprehensive guide on Hugo static site generator, including installation and usage instructions. üîóAWS S3 Documentation - Detailed information on configuring and using Amazon S3 for static website hosting. üîóGitHub Actions Documentation - Official documentation on setting up and configuring GitHub Actions for CI/CD pipelines. üîóPeaceiris GitHub Actions for Hugo - GitHub Actions for building and deploying Hugo sites. üîóJake Jarvis S3 Sync Action - GitHub Action for syncing files and directories to an S3 bucket. üîóAmazon S3 Simple Storage Service - Medium article written by Pr. Unubold Tumenbayar explaining Amazon S3 and its features for storage and static website hosting. ","permalink":"https://www.lemrabotttoulba.com/blogs/deploy-hugo-to-s3/","summary":"Introduction Deploying a static website can often seem daunting, especially when aiming for automation and continuous integration/continuous deployment (CI/CD). Hugo, a popular static site generator, simplifies the creation process. Coupled with Amazon S3 for hosting and GitHub Actions for automation, you can set up a robust CI/CD pipeline to deploy your Hugo site seamlessly. This guide will walk you through the steps to deploy a Hugo site to Amazon S3 using GitHub Actions in 2024.","title":"Deploy a Hugo site to Amazon S3 with CI/CD Pipeline"},{"content":"Intro The [Housing System Management project] is a robust and efficient application developed to manage housing-related data through a RESTful API. Leveraging Node.js and MongoDB, this project provides a seamless and secure way to interact with housing-related information while following the MVC (Model-View-Controller) architectural pattern. To ensure proper authentication and authorization, JSON Web Tokens (JWT) have been implemented. Additionally, Docker has been utilized to simplify the deployment and management of the MongoDB Server.\nKey Features: RESTful API: The project is built around a RESTful API design, enabling clients to perform CRUD (Create, Read, Update, Delete) operations on housing-related data. The API adheres to best practices for a consistent and user-friendly experience. Node.js: Node.js, known for its high-performance and event-driven architecture, forms the foundation of this project. It allows for efficient handling of incoming requests and responses, making the application scalable and responsive. MongoDB: MongoDB, a popular NoSQL database, has been chosen as the backend data store. Its flexible schema design accommodates housing-related information, making it well-suited for this project. JWT Authorization: To ensure secure access to the API\u0026rsquo;s endpoints, JSON Web Tokens (JWT) have been implemented. This provides authentication and authorization capabilities, allowing users to access appropriate resources based on their roles. MVC Model: Following the Model-View-Controller (MVC) architectural pattern, the codebase has been organized into distinct modules for better separation of concerns. This promotes code reusability, maintainability, and scalability. Dockerized MongoDB Server: Docker has been utilized to containerize the MongoDB Server, simplifying the setup and deployment process. It ensures that the application and database environment remain consistent across different development and production environments. Thorough Testing: The API has undergone comprehensive testing using both REST API testing frameworks and Postman. This testing approach ensures that the API functions correctly, delivering a reliable and stable user experience. Technologies Used: Node.js: For server-side application development and handling HTTP requests. Express.Js: A Node.js framework for building robust APIs. MongoDB: As the NoSQL database for storing and managing housing-related data. JWT: For authentication and authorization of API endpoints. Docker: For containerizing and managing the MongoDB Server. REST API: For defining the API endpoints and interactions. Postman: For manual and automated API testing and validation. GitHub Repository: The source code and documentation for this project can be found in the following GitHub repository: üîó Housing-Management API Repository.\nConclusion: The Housing System Management API built using Node.js, Express.Js, MongoDB, and JWT is a feature-rich and reliable application for managing housing-related data. With its RESTful architecture, Dockerized database, and thorough testing, the project ensures seamless functionality, security, and efficiency in handling housing information. This application could be readily integrated into real-world housing systems or serve as a solid foundation for further enhancements and customizations. Feel free to explore the GitHub repository to dive deeper into the code and contribute to the project\u0026rsquo;s development.\n","permalink":"https://www.lemrabotttoulba.com/projects/housing-management-api/","summary":"Intro The [Housing System Management project] is a robust and efficient application developed to manage housing-related data through a RESTful API. Leveraging Node.js and MongoDB, this project provides a seamless and secure way to interact with housing-related information while following the MVC (Model-View-Controller) architectural pattern. To ensure proper authentication and authorization, JSON Web Tokens (JWT) have been implemented. Additionally, Docker has been utilized to simplify the deployment and management of the MongoDB Server.","title":"Housing Management System"},{"content":"Description The [Library Management System] is a Java-based application that provides librarians and administrators with tools to efficiently manage book collections, library members, and checkout records. The system offers secure login authentication and role-based authorization, allowing users to perform specific tasks based on their roles (Librarian, Administrator, or Both).\nKey Features Secure login with role-based authorization. Add new library members to the system. Checkout books for library members (if available). Add copies of existing books to the library collection. View checkout records of library members. Identify overdue copies of publications and the library member who has them. Add new books to the library collection. Print checkout records of library members. Determine overdue copies and their possession status. Technologies Used Java Swing (for user interface) Object serialization (for data storage) GitHub Repository The source code and documentation for this project can be found in the following GitHub repository: üîó Library Management System.\nConclusion The Library Management System provides a user-friendly interface for librarians and administrators to efficiently manage the library\u0026rsquo;s resources and maintain records of members and checkout activities. With its secure login and role-based authorization system, users can perform their tasks with ease and ensure smooth library operations. The project demonstrates the use of Java, Swing for the user interface, and object serialization for data storage, making it a comprehensive solution for library management needs. Feel free to explore the repository, try out the system, and contribute to its further development.\n","permalink":"https://www.lemrabotttoulba.com/projects/java-swing-project/","summary":"Description The [Library Management System] is a Java-based application that provides librarians and administrators with tools to efficiently manage book collections, library members, and checkout records. The system offers secure login authentication and role-based authorization, allowing users to perform specific tasks based on their roles (Librarian, Administrator, or Both).\nKey Features Secure login with role-based authorization. Add new library members to the system. Checkout books for library members (if available). Add copies of existing books to the library collection.","title":"Library Management System"},{"content":"Main Tasks Designed and implemented a distributed integration service connecting external insurance systems with the Bank‚Äôs internal payment platform using Node.js, RESTful APIs, Webhooks, and PostgreSQL. Improved scalability and decoupling by implementing an asynchronous messaging architecture using RabbitMQ. Leveraged Docker for containerization and Eureka for service discovery across the microservices architecture. Created and deployed custom JavaScript functions within the payment platform to automate administrative dashboard tasks such as generating reports, executing scheduled jobs, and exporting data. Built a separate financial transaction simulation tool for the accounting team using Java, Spring Boot, Angular, and MySQL. Deployed the tool to AWS using EC2 for compute and RDS for relational data storage. üîó NATIONAL BANK OF MAURITANIA üîó Mobile Payment Platform ","permalink":"https://www.lemrabotttoulba.com/experience/bnm/","summary":"Main Tasks Designed and implemented a distributed integration service connecting external insurance systems with the Bank‚Äôs internal payment platform using Node.js, RESTful APIs, Webhooks, and PostgreSQL. Improved scalability and decoupling by implementing an asynchronous messaging architecture using RabbitMQ. Leveraged Docker for containerization and Eureka for service discovery across the microservices architecture. Created and deployed custom JavaScript functions within the payment platform to automate administrative dashboard tasks such as generating reports, executing scheduled jobs, and exporting data.","title":"NATIONAL BANK OF MAURITANIA"},{"content":"Main Tasks Developed a microservice architecture with inter-service communication using Java, Spring Boot, and REST API. Built a real-time hybrid monitoring dashboard for mobile and web using Ionic, Angular, and Cordova. Developed the mobile application backend using Node.js and Firebase Cloud Functions. Implemented authentication and authorization using Firebase Auth Service with JWT and bcrypt. Integrated Firebase Cloud Messaging for real-time alerts and push notifications in the mobile and web apps. Integrated the bank\u0026rsquo;s SMS API to notify administrators of critical system-issues. üîó PEOPLE‚ÄôS BANK OF MAURITANIA ","permalink":"https://www.lemrabotttoulba.com/experience/bpm/","summary":"Main Tasks Developed a microservice architecture with inter-service communication using Java, Spring Boot, and REST API. Built a real-time hybrid monitoring dashboard for mobile and web using Ionic, Angular, and Cordova. Developed the mobile application backend using Node.js and Firebase Cloud Functions. Implemented authentication and authorization using Firebase Auth Service with JWT and bcrypt. Integrated Firebase Cloud Messaging for real-time alerts and push notifications in the mobile and web apps. Integrated the bank\u0026rsquo;s SMS API to notify administrators of critical system-issues.","title":"PEOPLE‚ÄôS BANK OF MAURITANIA"},{"content":"Main Tasks Built a responsive web application using Reactjs, HTML, CSS, and JavaScript, focusing on accessibility and UX. Used AWS Amplify, IAM, and Lambda to deploy React.js UI and enable Lambda read/write access to AWS S3. Implemented semantic HTML standards to improve accessibility for users with assistive technologies. Collaborated with team members for scalable frontend architecture and debugging. Maintained documentation and user manuals for improved usability and knowledge transfer. Used Git, Bitbucket, and Trello to manage tasks and source control effectively. üîó MAURIBIT ","permalink":"https://www.lemrabotttoulba.com/experience/mauribit/","summary":"Main Tasks Built a responsive web application using Reactjs, HTML, CSS, and JavaScript, focusing on accessibility and UX. Used AWS Amplify, IAM, and Lambda to deploy React.js UI and enable Lambda read/write access to AWS S3. Implemented semantic HTML standards to improve accessibility for users with assistive technologies. Collaborated with team members for scalable frontend architecture and debugging. Maintained documentation and user manuals for improved usability and knowledge transfer. Used Git, Bitbucket, and Trello to manage tasks and source control effectively.","title":"MAURIBIT"},{"content":"Kindly write you message down and I will get back to you soon \u0026hellip;\n","permalink":"https://www.lemrabotttoulba.com/contact/","summary":"contact","title":"Contact"}]