[{"content":"University Website ðŸ”— Maharishi International University â€¢ USA Key Courses: Below list of main courses I have studied on campus at MIU:\nFundamental Programming Practices Modern Programming Practices Server-Side Programming Algorithms Database Management Systems Modern Web Applications ","permalink":"http://localhost:1313/education/miu-university/","summary":"\u003ch1 id=\"university-website\"\u003eUniversity Website\u003c/h1\u003e\n\u003ch3 id=\"-maharishi-international-university--usa\"\u003eðŸ”— \u003ca href=\"https://compro.miu.edu/\"\u003eMaharishi International University â€¢ USA\u003c/a\u003e\u003c/h3\u003e\n\u003ch1 id=\"key-courses\"\u003eKey Courses:\u003c/h1\u003e\n\u003cp\u003eBelow list of main courses I have studied on campus at MIU:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFundamental Programming Practices\u003c/li\u003e\n\u003cli\u003eModern Programming Practices\u003c/li\u003e\n\u003cli\u003eServer-Side Programming\u003c/li\u003e\n\u003cli\u003eAlgorithms\u003c/li\u003e\n\u003cli\u003eDatabase Management Systems\u003c/li\u003e\n\u003cli\u003eModern Web Applications\u003c/li\u003e\n\u003c/ul\u003e","title":"Maharishi International University"},{"content":"University Website ðŸ”— Nouakchott University Key Courses: Below is a list of the main courses I studied on campus during my Master degree at Nouakchott University:\nAdvanced Java Programming Frameworks based on Java Frameworks based on JavaScript Frameworks based on Python Service-oriented Architecture Cloud Computing Information Systems Security Database Optimization Distributed Systems Design Patterns in Java Software Development Life Cycle Fundamentals of Computer Networking Semantic Web and Ontologies ","permalink":"http://localhost:1313/education/una-university-master/","summary":"\u003ch1 id=\"university-website\"\u003eUniversity Website\u003c/h1\u003e\n\u003ch3 id=\"-nouakchott-university\"\u003eðŸ”— \u003ca href=\"https://www.univ-nkc.mr/\"\u003eNouakchott University\u003c/a\u003e\u003c/h3\u003e\n\u003ch1 id=\"key-courses\"\u003eKey Courses:\u003c/h1\u003e\n\u003cp\u003eBelow is a list of the main courses I studied on campus during my Master degree at Nouakchott University:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdvanced Java Programming\u003c/li\u003e\n\u003cli\u003eFrameworks based on Java\u003c/li\u003e\n\u003cli\u003eFrameworks based on JavaScript\u003c/li\u003e\n\u003cli\u003eFrameworks based on Python\u003c/li\u003e\n\u003cli\u003eService-oriented Architecture\u003c/li\u003e\n\u003cli\u003eCloud Computing\u003c/li\u003e\n\u003cli\u003eInformation Systems Security\u003c/li\u003e\n\u003cli\u003eDatabase Optimization\u003c/li\u003e\n\u003cli\u003eDistributed Systems\u003c/li\u003e\n\u003cli\u003eDesign Patterns in Java\u003c/li\u003e\n\u003cli\u003eSoftware Development Life Cycle\u003c/li\u003e\n\u003cli\u003eFundamentals of Computer Networking\u003c/li\u003e\n\u003cli\u003eSemantic Web and Ontologies\u003c/li\u003e\n\u003c/ul\u003e","title":"Nouakchott University"},{"content":"University Website ðŸ”— Nouakchott University Key Courses: Below is a list of the main courses I studied on campus during my bachelor degree at Nouakchott University:\nBasic of Computer and Programming Algorithm and programation Algorithm and Complexity Algorithm and Functional approach General Algebra Sequences and series Material Mechanical point Lineair Algebra I Lineair Algebra II Functions of One Variable Theoretical Computing Geometrical Optics Scientific Computation Probability and Statistics Relational Database Numerical Analysis Measure and Integral ","permalink":"http://localhost:1313/education/una-university-bachelor/","summary":"\u003ch1 id=\"university-website\"\u003eUniversity Website\u003c/h1\u003e\n\u003ch3 id=\"-nouakchott-university\"\u003eðŸ”— \u003ca href=\"https://www.univ-nkc.mr/\"\u003eNouakchott University\u003c/a\u003e\u003c/h3\u003e\n\u003ch1 id=\"key-courses\"\u003eKey Courses:\u003c/h1\u003e\n\u003cp\u003eBelow is a list of the main courses I studied on campus during my bachelor degree at Nouakchott University:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBasic of Computer and Programming\u003c/li\u003e\n\u003cli\u003eAlgorithm and programation\u003c/li\u003e\n\u003cli\u003eAlgorithm and Complexity\u003c/li\u003e\n\u003cli\u003eAlgorithm and Functional approach\u003c/li\u003e\n\u003cli\u003eGeneral Algebra\u003c/li\u003e\n\u003cli\u003eSequences and series\u003c/li\u003e\n\u003cli\u003eMaterial Mechanical point\u003c/li\u003e\n\u003cli\u003eLineair Algebra I\u003c/li\u003e\n\u003cli\u003eLineair Algebra II\u003c/li\u003e\n\u003cli\u003eFunctions of One Variable\u003c/li\u003e\n\u003cli\u003eTheoretical Computing\u003c/li\u003e\n\u003cli\u003eGeometrical Optics\u003c/li\u003e\n\u003cli\u003eScientific Computation\u003c/li\u003e\n\u003cli\u003eProbability and Statistics\u003c/li\u003e\n\u003cli\u003eRelational Database\u003c/li\u003e\n\u003cli\u003eNumerical Analysis\u003c/li\u003e\n\u003cli\u003eMeasure and Integral\u003c/li\u003e\n\u003c/ul\u003e","title":"Nouakchott University"},{"content":"Description The [Language Learning Platform] is a full-stack web-based application developed as part of my PHP project for the MWA course. The platform was developed using the MEAN Stack technologies, and it aims to provide a comprehensive resource for individuals interested in learning new languages. It offers a curated collection of books for each language, along with ratings and feedback from users.\nKey Features: Language Documentation: The platform includes a document that lists various languages and their associated countries. Users can explore different languages and gain insights into their cultural and geographical contexts.\nBook Recommendations:* For each language, the platform offers a collection of books specifically chosen to aid language learning. Users can browse through the recommended books, which include titles, authors, and prices, helping them make informed decisions.\nUser Ratings and Feedback:* The platform allows users to rate and provide feedback on the books they have used for language learning. This feature enables learners to benefit from the experiences and recommendations of others within the community.\nExpandable Database: Initially, the project focuses on two or three languages with a selection of two or three books each. However, as the project progresses, the database can be expanded to include more languages and a wider range of resources.\nTechnologies Used: Angular: Front-end framework for building the user interface. Node.js: For server-side application development and handling HTTP requests. Express.Js: A Node.js framework for building robust APIs. MongoDB: As the NoSQL database for storing and managing housing-related data. JWT: For authentication and authorization of API endpoints. Docker: For containerizing and managing the MongoDB Server. REST API: For defining the API endpoints and interactions. Postman: For manual and automated API testing and validation. GitHub Repository: The source code and documentation for this project can be found in the following GitHub repository: ðŸ”— Language Learning Platform\nConclusion: The Language Learning Platform aims to create an interactive and supportive community for language enthusiasts, facilitating effective language learning through recommended books and shared experiences. It provides an opportunity for users to explore new languages, connect with others, and make informed choices in their language learning journey.\n","permalink":"http://localhost:1313/projects/mean-stack-app/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe [\u003cstrong\u003eLanguage Learning Platform\u003c/strong\u003e] is a full-stack web-based application developed as part of my PHP project for the MWA course. The platform was developed using the \u003cstrong\u003eMEAN Stack\u003c/strong\u003e technologies, and it aims to provide a comprehensive resource for individuals interested in learning new languages. It offers a curated collection of books for each language, along with ratings and feedback from users.\u003c/p\u003e\n\u003ch2 id=\"key-features\"\u003eKey Features:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eLanguage Documentation: The platform includes a document that lists various languages and their associated countries. Users can explore different languages and gain insights into their cultural and geographical contexts.\u003c/p\u003e","title":"MEAN-Stack application - Language Learning Platform"},{"content":"Introduction Deploying a static website can often seem daunting, especially when aiming for automation and continuous integration/continuous deployment (CI/CD). Hugo, a popular static site generator, simplifies the creation process. Coupled with Amazon S3 for hosting and GitHub Actions for automation, you can set up a robust CI/CD pipeline to deploy your Hugo site seamlessly. This guide will walk you through the steps to deploy a Hugo site to Amazon S3 using GitHub Actions in 2024.\nPrerequisites Before we dive into the setup, ensure you have the following:\nA Hugo site ready for deployment. An AWS account with S3 permissions. A GitHub account. Basic knowledge of YAML syntax and Git. Setting Up Your Hugo Site First, if you haven\u0026rsquo;t already, set up your Hugo site: # Install Hugo brew install hugo # Create a new Hugo site hugo new site my-hugo-site # Navigate to the site directory cd my-hugo-site # Add a theme (optional | e.g., Ananke) git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml # Create some content hugo new posts/my-first-post.md You can also add your theme manually: Choose your prefered theme by visiting: ðŸ”—Complete List | Hugo Themes Clone it into your project, using git clone your-choosen-theme-repository-url Configuring Amazon S3 Next, configure your S3 bucket to host the static site:\nCreate an S3 Bucket: Go to the S3 console and create a new bucket. Name the bucket (e.g., my-hugo-site). Set Bucket Permissions: Enable static website hosting in the bucket properties. Set the index document to index.html. Set the error document to 404.html. Bucket Policy Add a bucket policy to make the content publicly accessible. Replace your-bucket-name with your actual bucket name: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::your-bucket-name/*\u0026#34; } ] } Create an IAM User Create a new IAM user with programmatic access. Attach a policy to grant the user permission to upload to S3: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::your-bucket-name/*\u0026#34; } ] } - Note down the Access Key ID and Secret Access Key\rSetting Up GitHub Repository Initialize a Git repository and push your Hugo site to GitHub:\n# Initialize Git git init git remote add origin https://github.com/yourusername/my-hugo-site.git # Commit and push your site git add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin master Creating GitHub Actions Workflow Create a GitHub Actions workflow to automate the deployment process:\nCreate Workflow File Create a workflow file under .github/workflows in your project Make sure the file configuration is in YAML format Configure Workflow Bellow is an exemple of a workflow file configuration name: Deploy Hugo Site to S3 on: push: branches: - master jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Install dependencies run: | npm install - name: Build site run: | hugo - name: Deploy to S3 uses: jakejarvis/s3-sync-action@v0.5.0 with: args: --acl public-read --follow-symlinks --delete env: AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }} AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} SOURCE_DIR: \u0026#39;public\u0026#39; - Push your local code to your GitHub repository.\rAdd Secrets In your GitHub repository, go to Settings \u0026gt; Secrets and add the following secrets: AWS_S3_BUCKET: Your S3 bucket name. AWS_ACCESS_KEY_ID: Your IAM user\u0026rsquo;s access key ID. AWS_SECRET_ACCESS_KEY: Your IAM user\u0026rsquo;s secret access key. Testing the CI/CD Pipeline Push a commit to the main branch to trigger the workflow:\ngit add . git commit -m \u0026#34;Trigger deployment\u0026#34; git push origin master Monitor the Actions tab in your GitHub repository to ensure the workflow runs successfully. Once completed, your Hugo site should be deployed to your S3 bucket.\nCongratulations ðŸŽ‰ðŸ¥³ You have successfully set up a CI/CD pipeline to deploy your Hugo site to Amazon S3 using GitHub Actions.\nThis automated process ensures that your site is always up-to-date with the latest changes, making your workflow more efficient and reliable.\nSource ðŸ”—Hugo Documentation - Comprehensive guide on Hugo static site generator, including installation and usage instructions. ðŸ”—AWS S3 Documentation - Detailed information on configuring and using Amazon S3 for static website hosting. ðŸ”—GitHub Actions Documentation - Official documentation on setting up and configuring GitHub Actions for CI/CD pipelines. ðŸ”—Peaceiris GitHub Actions for Hugo - GitHub Actions for building and deploying Hugo sites. ðŸ”—Jake Jarvis S3 Sync Action - GitHub Action for syncing files and directories to an S3 bucket. ðŸ”—Amazon S3 Simple Storage Service - Medium article written by Pr. Unubold Tumenbayar explaining Amazon S3 and its features for storage and static website hosting. ","permalink":"http://localhost:1313/blogs/deploy-hugo-to-s3/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eDeploying a static website can often seem daunting, especially when aiming for automation and continuous integration/continuous deployment (CI/CD). Hugo, a popular static site generator, simplifies the creation process. Coupled with Amazon S3 for hosting and GitHub Actions for automation, you can set up a robust CI/CD pipeline to deploy your Hugo site seamlessly. This guide will walk you through the steps to deploy a Hugo site to Amazon S3 using GitHub Actions in 2024.\u003c/p\u003e","title":"Deploy a Hugo site to Amazon S3 with CI/CD Pipeline"},{"content":"Intro The [Housing System Management project] is a robust and efficient application developed to manage housing-related data through a RESTful API. Leveraging Node.js and MongoDB, this project provides a seamless and secure way to interact with housing-related information while following the MVC (Model-View-Controller) architectural pattern. To ensure proper authentication and authorization, JSON Web Tokens (JWT) have been implemented. Additionally, Docker has been utilized to simplify the deployment and management of the MongoDB Server.\nKey Features: RESTful API: The project is built around a RESTful API design, enabling clients to perform CRUD (Create, Read, Update, Delete) operations on housing-related data. The API adheres to best practices for a consistent and user-friendly experience. Node.js: Node.js, known for its high-performance and event-driven architecture, forms the foundation of this project. It allows for efficient handling of incoming requests and responses, making the application scalable and responsive. MongoDB: MongoDB, a popular NoSQL database, has been chosen as the backend data store. Its flexible schema design accommodates housing-related information, making it well-suited for this project. JWT Authorization: To ensure secure access to the API\u0026rsquo;s endpoints, JSON Web Tokens (JWT) have been implemented. This provides authentication and authorization capabilities, allowing users to access appropriate resources based on their roles. MVC Model: Following the Model-View-Controller (MVC) architectural pattern, the codebase has been organized into distinct modules for better separation of concerns. This promotes code reusability, maintainability, and scalability. Dockerized MongoDB Server: Docker has been utilized to containerize the MongoDB Server, simplifying the setup and deployment process. It ensures that the application and database environment remain consistent across different development and production environments. Thorough Testing: The API has undergone comprehensive testing using both REST API testing frameworks and Postman. This testing approach ensures that the API functions correctly, delivering a reliable and stable user experience. Technologies Used: Node.js: For server-side application development and handling HTTP requests. Express.Js: A Node.js framework for building robust APIs. MongoDB: As the NoSQL database for storing and managing housing-related data. JWT: For authentication and authorization of API endpoints. Docker: For containerizing and managing the MongoDB Server. REST API: For defining the API endpoints and interactions. Postman: For manual and automated API testing and validation. GitHub Repository: The source code and documentation for this project can be found in the following GitHub repository: ðŸ”— Housing-Management API Repository.\nConclusion: The Housing System Management API built using Node.js, Express.Js, MongoDB, and JWT is a feature-rich and reliable application for managing housing-related data. With its RESTful architecture, Dockerized database, and thorough testing, the project ensures seamless functionality, security, and efficiency in handling housing information. This application could be readily integrated into real-world housing systems or serve as a solid foundation for further enhancements and customizations. Feel free to explore the GitHub repository to dive deeper into the code and contribute to the project\u0026rsquo;s development.\n","permalink":"http://localhost:1313/projects/housing-management-api/","summary":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eThe [\u003cstrong\u003eHousing System Management project\u003c/strong\u003e] is a robust and efficient application developed to manage housing-related data through a RESTful API. Leveraging Node.js and MongoDB, this project provides a seamless and secure way to interact with housing-related information while following the MVC (Model-View-Controller) architectural pattern. To ensure proper authentication and authorization, JSON Web Tokens (JWT) have been implemented. Additionally, Docker has been utilized to simplify the deployment and management of the MongoDB Server.\u003c/p\u003e","title":"Housing Management System"},{"content":"Description The [Library Management System] is a Java-based application that provides librarians and administrators with tools to efficiently manage book collections, library members, and checkout records. The system offers secure login authentication and role-based authorization, allowing users to perform specific tasks based on their roles (Librarian, Administrator, or Both).\nKey Features Secure login with role-based authorization. Add new library members to the system. Checkout books for library members (if available). Add copies of existing books to the library collection. View checkout records of library members. Identify overdue copies of publications and the library member who has them. Add new books to the library collection. Print checkout records of library members. Determine overdue copies and their possession status. Technologies Used Java Swing (for user interface) Object serialization (for data storage) GitHub Repository The source code and documentation for this project can be found in the following GitHub repository: ðŸ”— Library Management System.\nConclusion The Library Management System provides a user-friendly interface for librarians and administrators to efficiently manage the library\u0026rsquo;s resources and maintain records of members and checkout activities. With its secure login and role-based authorization system, users can perform their tasks with ease and ensure smooth library operations. The project demonstrates the use of Java, Swing for the user interface, and object serialization for data storage, making it a comprehensive solution for library management needs. Feel free to explore the repository, try out the system, and contribute to its further development.\n","permalink":"http://localhost:1313/projects/java-swing-project/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe [\u003cstrong\u003eLibrary Management System\u003c/strong\u003e] is a Java-based application that provides librarians and administrators with tools to efficiently manage book collections, library members, and checkout records. The system offers secure login authentication and role-based authorization, allowing users to perform specific tasks based on their roles (Librarian, Administrator, or Both).\u003c/p\u003e\n\u003ch2 id=\"key-features\"\u003eKey Features\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSecure login with role-based authorization.\u003c/li\u003e\n\u003cli\u003eAdd new library members to the system.\u003c/li\u003e\n\u003cli\u003eCheckout books for library members (if available).\u003c/li\u003e\n\u003cli\u003eAdd copies of existing books to the library collection.\u003c/li\u003e\n\u003cli\u003eView checkout records of library members.\u003c/li\u003e\n\u003cli\u003eIdentify overdue copies of publications and the library member who has them.\u003c/li\u003e\n\u003cli\u003eAdd new books to the library collection.\u003c/li\u003e\n\u003cli\u003ePrint checkout records of library members.\u003c/li\u003e\n\u003cli\u003eDetermine overdue copies and their possession status.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"technologies-used\"\u003eTechnologies Used\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eJava\u003c/li\u003e\n\u003cli\u003eSwing (for user interface)\u003c/li\u003e\n\u003cli\u003eObject serialization (for data storage)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"github-repository\"\u003eGitHub Repository\u003c/h2\u003e\n\u003cp\u003eThe source code and documentation for this project can be found in the following GitHub repository:\nðŸ”— \u003ca href=\"https://github.com/tlb-lemrabott/Library-Management-System\"\u003e\u003cstrong\u003eLibrary Management System\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e","title":"Library Management System"},{"content":"Main Tasks Integrated the bankâ€™s digital payment platform with third-party systems. Utilized JavaScript, Nodejs, RESTful API, and Webhooks to build the integration service. Developed cron jobs, reusable modules, and configuration files for the admin dashboard. Used Java, Spring boot, REST API, MySQL, and Angular to develop a Web tool to simulate financial transactions. Helped in ensuring the safety and accuracy of the accounting operations. Designed application architectures and workflows, and documented functionality requirements. ðŸ”— NATIONAL BANQUE OF MAURITANIA ðŸ”— Mobile Payment Platform ","permalink":"http://localhost:1313/experience/bnm/","summary":"\u003ch3 id=\"main-tasks\"\u003eMain Tasks\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIntegrated the bankâ€™s digital payment platform with third-party systems.\u003c/li\u003e\n\u003cli\u003eUtilized JavaScript, Nodejs, RESTful API, and Webhooks to build the integration service.\u003c/li\u003e\n\u003cli\u003eDeveloped cron jobs, reusable modules, and configuration files for the admin dashboard.\u003c/li\u003e\n\u003cli\u003eUsed Java, Spring boot, REST API, MySQL, and Angular to develop a Web tool to simulate financial transactions. Helped in ensuring the safety and accuracy of the accounting operations.\u003c/li\u003e\n\u003cli\u003eDesigned application architectures and workflows, and documented functionality requirements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"-national-banque-of-mauritania\"\u003eðŸ”— \u003ca href=\"http://www.bnm.mr/\"\u003e\u003cstrong\u003eNATIONAL BANQUE OF MAURITANIA\u003c/strong\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003ch5 id=\"-mobile-payment-platform\"\u003eðŸ”— \u003ca href=\"http://www.click.mr/\"\u003e\u003cstrong\u003eMobile Payment Platform\u003c/strong\u003e\u003c/a\u003e\u003c/h5\u003e","title":"NATIONAL BANK OF MAURITANIA"},{"content":"Main Tasks Built a robust logging management and backup automation system. Improved data accessibility and integrity. Used Java, and Spring boot to develop RESTful APIs and Microservices for the backend process. Developed a real time hybrid application (web and mobile) for the system monitoring dashboard. Used Ionic, Cordova, Android SDK, Angular for the UI development. Used JavaScript, Nodejs, JWT, Google Firebase infrastructure for the backend process. Used Firebase Cloud Messaging for real-time push notifications to the UI, with indicating the alert level Integrated the bank\u0026rsquo;s SMS API for risk alerting, ensuring timely notifications to administrators for critical issues. ðŸ”— PEOPLEâ€™S BANK OF MAURITANIA ","permalink":"http://localhost:1313/experience/bpm/","summary":"\u003ch3 id=\"main-tasks\"\u003eMain Tasks\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBuilt a robust logging management and backup automation system. Improved data accessibility and integrity.\u003c/li\u003e\n\u003cli\u003eUsed Java, and Spring boot to develop RESTful APIs and Microservices for the backend process.\u003c/li\u003e\n\u003cli\u003eDeveloped a real time hybrid application (web and mobile) for the system monitoring dashboard.\u003c/li\u003e\n\u003cli\u003eUsed Ionic, Cordova, Android SDK, Angular for the UI development.\u003c/li\u003e\n\u003cli\u003eUsed JavaScript, Nodejs, JWT, Google Firebase infrastructure for the backend process.\u003c/li\u003e\n\u003cli\u003eUsed Firebase Cloud Messaging for real-time push notifications to the UI, with indicating the alert level\u003c/li\u003e\n\u003cli\u003eIntegrated the bank\u0026rsquo;s SMS API for risk alerting, ensuring timely notifications to administrators for critical issues.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"-peoples-bank-of-mauritania\"\u003eðŸ”— \u003ca href=\"https://www.bpm.mr/\"\u003e\u003cstrong\u003ePEOPLEâ€™S BANK OF MAURITANIA\u003c/strong\u003e\u003c/a\u003e\u003c/h4\u003e","title":"PEOPLEâ€™S BANK OF MAURITANIA"},{"content":"Description Collaborated with a team of developers to design and implement a responsive web application. Implemented front-end functionalities using HTML, CSS, and JavaScript, ensuring a seamless user experience. Participated in code maintainability, debugging, and bug fixing to improve application stability. Documented technical specifications and created user manuals for internal use. Utilized Git, Bitbucket and Trello. Resulted in a more efficient and streamlined workflow. ðŸ”— MAURIBIT ","permalink":"http://localhost:1313/experience/mauribit/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCollaborated with a team of developers to design and implement a responsive web application.\u003c/li\u003e\n\u003cli\u003eImplemented front-end functionalities using HTML, CSS, and JavaScript, ensuring a seamless user experience.\u003c/li\u003e\n\u003cli\u003eParticipated in code maintainability, debugging, and bug fixing to improve application stability.\u003c/li\u003e\n\u003cli\u003eDocumented technical specifications and created user manuals for internal use.\u003c/li\u003e\n\u003cli\u003eUtilized Git, Bitbucket and Trello. Resulted in a more efficient and streamlined workflow.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"-mauribit\"\u003eðŸ”— \u003ca href=\"https://www.mauribit.com/\"\u003e\u003cstrong\u003eMAURIBIT\u003c/strong\u003e\u003c/a\u003e\u003c/h4\u003e","title":"MAURIBIT"},{"content":"Kindly write you message down and I will get back to you soon \u0026hellip;\n","permalink":"http://localhost:1313/contact/","summary":"contact","title":"Contact"}]