name: Deploy LeetCode API to AWS Lambda

on:
  push:
    branches: [main]

env:
  FUNCTION_NAME: leetcode-api-fn
  ROLE_NAME: leetcode-lambda-role
  API_NAME: leetcode-api
  STAGE: prod
  REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install
        workingDirectory: hugo-project/leetcode-api/aws-lambda-service/

      - name: Compile TypeScript
        run: npx tsc
        workingDirectory: hugo-project/leetcode-api/aws-lambda-service/

      - name: Zip Lambda
        run: zip -r function.zip .
        workingDirectory: hugo-project/leetcode-api/aws-lambda-service/dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Create IAM Role if it doesn't exist
        run: |
          if ! aws iam get-role --role-name $ROLE_NAME; then
            aws iam create-role \
              --role-name $ROLE_NAME \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": {"Service": "lambda.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }]
              }'
            aws iam attach-role-policy \
              --role-name $ROLE_NAME \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          fi

      - name: Get Role ARN
        id: get-role
        run: |
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Create or update Lambda function
        run: |
          set -e
          if aws lambda get-function --function-name $FUNCTION_NAME; then
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://function.zip
          else
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime nodejs18.x \
              --handler lambda.handler \
              --zip-file fileb://function.zip \
              --role ${{ steps.get-role.outputs.role_arn }}
          fi

      - name: Create HTTP API if needed
        id: create-api
        run: |
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text)
          if [ -z "$API_ID" ]; then
            API_ID=$(aws apigatewayv2 create-api \
              --name "$API_NAME" \
              --protocol-type HTTP \
              --target arn:aws:lambda:${{ env.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:$FUNCTION_NAME \
              --query 'ApiId' --output text)
          fi
          echo "api_id=$API_ID" >> $GITHUB_OUTPUT

      - name: Add invoke permission
        run: |
          set -e
          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id apigateway-access \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn arn:aws:execute-api:${{ env.REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:${{ steps.create-api.outputs.api_id }}/*/*/ \
            || echo "Permission may already exist"

      - name: Deploy route /api/leetcode/{username}
        run: |
          set -e
          API_ID=${{ steps.create-api.outputs.api_id }}
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "GET /api/leetcode/{username}" \
            --target integrations/$FUNCTION_NAME \
            || echo "Route may already exist"
